/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub type bool_ = bool;
pub type umode_t = ::aya_ebpf::cty::c_ushort;
pub type __u32 = ::aya_ebpf::cty::c_uint;
pub type u32_ = __u32;
pub type __kernel_dev_t = u32_;
pub type __kernel_gid32_t = ::aya_ebpf::cty::c_uint;
pub type __kernel_uid32_t = ::aya_ebpf::cty::c_uint;
pub type dev_t = __kernel_dev_t;
pub type gid_t = __kernel_gid32_t;
pub type uid_t = __kernel_uid32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kgid_t {
    pub val: gid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kuid_t {
    pub val: uid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_head {
    pub next: *mut list_head,
    pub prev: *mut list_head,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_cap_struct {
    pub cap: [__u32; 2usize],
}
pub type kernel_cap_t = kernel_cap_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct audit_cap_data {
    pub permitted: kernel_cap_t,
    pub inheritable: kernel_cap_t,
    pub __bindgen_anon_1: audit_cap_data__bindgen_ty_1,
    pub ambient: kernel_cap_t,
    pub rootid: kuid_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union audit_cap_data__bindgen_ty_1 {
    pub fE: ::aya_ebpf::cty::c_uint,
    pub effective: kernel_cap_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lsmblob {
    pub secid: [u32_; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct audit_names {
    pub list: list_head,
    pub name: *mut filename,
    pub name_len: ::aya_ebpf::cty::c_int,
    pub hidden: bool_,
    pub ino: ::aya_ebpf::cty::c_ulong,
    pub dev: dev_t,
    pub mode: umode_t,
    pub uid: kuid_t,
    pub gid: kgid_t,
    pub rdev: dev_t,
    pub oblob: lsmblob,
    pub fcap: audit_cap_data,
    pub fcap_ver: ::aya_ebpf::cty::c_uint,
    pub type_: ::aya_ebpf::cty::c_uchar,
    pub should_free: bool_,
}
#[repr(C)]
#[derive(Debug)]
pub struct filename {
    pub name: *const ::aya_ebpf::cty::c_char,
    pub uptr: *const ::aya_ebpf::cty::c_char,
    pub refcnt: ::aya_ebpf::cty::c_int,
    pub aname: *mut audit_names,
    pub iname: __IncompleteArrayField<::aya_ebpf::cty::c_char>,
}

